// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: qachat.proto

package qachat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMAgent_GetAnswer_FullMethodName      = "/qachat.LLMAgent/GetAnswer"
	LLMAgent_GetListAnswers_FullMethodName = "/qachat.LLMAgent/GetListAnswers"
)

// LLMAgentClient is the client API for LLMAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMAgentClient interface {
	GetAnswer(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
	GetListAnswers(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnswerResponse], error)
}

type lLMAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMAgentClient(cc grpc.ClientConnInterface) LLMAgentClient {
	return &lLMAgentClient{cc}
}

func (c *lLMAgentClient) GetAnswer(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, LLMAgent_GetAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMAgentClient) GetListAnswers(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnswerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMAgent_ServiceDesc.Streams[0], LLMAgent_GetListAnswers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PromptRequest, AnswerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMAgent_GetListAnswersClient = grpc.ServerStreamingClient[AnswerResponse]

// LLMAgentServer is the server API for LLMAgent service.
// All implementations must embed UnimplementedLLMAgentServer
// for forward compatibility.
type LLMAgentServer interface {
	GetAnswer(context.Context, *PromptRequest) (*AnswerResponse, error)
	GetListAnswers(*PromptRequest, grpc.ServerStreamingServer[AnswerResponse]) error
	mustEmbedUnimplementedLLMAgentServer()
}

// UnimplementedLLMAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMAgentServer struct{}

func (UnimplementedLLMAgentServer) GetAnswer(context.Context, *PromptRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedLLMAgentServer) GetListAnswers(*PromptRequest, grpc.ServerStreamingServer[AnswerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetListAnswers not implemented")
}
func (UnimplementedLLMAgentServer) mustEmbedUnimplementedLLMAgentServer() {}
func (UnimplementedLLMAgentServer) testEmbeddedByValue()                  {}

// UnsafeLLMAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMAgentServer will
// result in compilation errors.
type UnsafeLLMAgentServer interface {
	mustEmbedUnimplementedLLMAgentServer()
}

func RegisterLLMAgentServer(s grpc.ServiceRegistrar, srv LLMAgentServer) {
	// If the following call pancis, it indicates UnimplementedLLMAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMAgent_ServiceDesc, srv)
}

func _LLMAgent_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMAgentServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMAgent_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMAgentServer).GetAnswer(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMAgent_GetListAnswers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PromptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMAgentServer).GetListAnswers(m, &grpc.GenericServerStream[PromptRequest, AnswerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMAgent_GetListAnswersServer = grpc.ServerStreamingServer[AnswerResponse]

// LLMAgent_ServiceDesc is the grpc.ServiceDesc for LLMAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qachat.LLMAgent",
	HandlerType: (*LLMAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnswer",
			Handler:    _LLMAgent_GetAnswer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetListAnswers",
			Handler:       _LLMAgent_GetListAnswers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "qachat.proto",
}
